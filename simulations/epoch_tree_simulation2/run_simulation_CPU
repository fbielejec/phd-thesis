#!/bin/bash

# ---README--- #
# Simulates for kappa = 1, kappa = 10, kappa = 1
# Inference for epoch(kappa = 1, kappa = 10, kappa = 1), logging MCC tree (for a target 'true' tree)


#BEAGLE_PATH=/usr/local/lib
#BEAST_PATH=/home/filip/Dropbox/JavaProjects/beast-mcmc/build/dist/beast.jar

BEAGLE_PATH=$HOME/lib
BEAST_PATH=$HOME/beast.jar

#number of iterations
N=40

# number of parallel threads to run
BATCH=40

# starting seed
SEED=123

# burnin for TreeAnnotator
BURNIN=1000

TAB='\t'
NEW='\n'

# create results sub-directory
mkdir results

for ((i = 1 ; i <= N ; i += BATCH)); do
  
  echo "Counter: $i"
  
  for ((j = i ; j < i + BATCH ; j++)); do
    
    if [[ j -le N ]]; then
      
      # start a background thread (non-blocking loop)
      (
        # increment seed
        let NEWSEED=$SEED+$j
        
        echo "Doing in par: $j for seed $NEWSEED"
        
        # create sub-directory
        mkdir $j
        
        # copy scripts
        cp first_part.xml  $j/first_part.xml
        cp generate_sequences.xml  $j/generate_sequences.xml
        cp last_part.xml  $j/last_part.xml
        
        # change directory
        cd $j
        
        # generate alignment
        java -Djava.library.path=$BEAGLE_PATH -jar $BEAST_PATH -beagle_CPU -beagle_double -beagle_scaling always -seed $NEWSEED -overwrite generate_sequences.xml
        
        # generate xml
        cat first_part.xml sequences.xml last_part.xml > mcmc.xml
        
        # run analysis
        TIC="$(date +%s)"
        java -Djava.library.path=$BEAGLE_PATH -jar $BEAST_PATH -beagle_CPU -beagle_double -beagle_scaling always -seed $NEWSEED -overwrite mcmc.xml
        TOC="$(date +%s)"
        TIME=$(echo "scale=5; ($TOC-$TIC)/3600" | bc)
        
        echo "Finished in: $TIME h"
        
        # analyse results (tree annotator)
#        java -cp $BEAST_PATH dr.app.tools.LogAnalyser -burnin $BURNIN epoch.log > summary_standard
         java -cp $BEAST_PATH dr.app.tools.TreeAnnotator -burnin $BURNIN -target ../startingTree.newick epoch.trees mcc.tree
        
        # log the resulting mcc tree
        cp mcc.tree ../results/$NEWSEED.tree
        
        # come back to the root directory
        cd ../
        
        # clean up
        rm -r $j
        
      )&
      
    fi # END: j check
    
  done # END: j loop
  
  # wait for all spawned sub-processes to finish
  wait
  
done #END: i loop

exit $?
