#!/bin/bash

BEAGLE_PATH=/usr/local/lib
BEAST_PATH=/home/filip/Dropbox/JavaProjects/beast-mcmc/build/dist/beast.jar

#BEAGLE_PATH=$HOME/lib
#BEAST_PATH=$HOME/beast.jar


# constant population size
POP_SIZE=(1 5 10 50 100 500 1000) #5000)

# number of iterations per population size
N=40

# number of parallel threads to run
BATCH=40


SEED=123
CLOCK_RATE=3E-3
LINE_NUMBER=162
FILE=generate_sequences.xml
TAG='\/\>'
TAB='\t'
NEW='\n'
# burnin for LogAnalyser
BURNIN=1


for i in "${POP_SIZE[@]}"; do
  
  # make dir, copy files
  DIR=popSize$i
  mkdir $DIR
  cp $FILE $DIR/$FILE
  cd $DIR
  
  # create results file
  echo -e simulation $TAB seed $TAB time $TAB simulatedPopSize $TAB simulatedRootHeight $TAB rootHeight.mean $TAB rootHeight.stdErr $TAB rootHeight.median $TAB rootHeight.hpdLower $TAB rootHeight.hpdUpper $TAB rootHeight.ESS $TAB simulatedClockRate clockRate.mean $TAB clockRate.stdErr $TAB clockRate.median $TAB clockRate.hpdLower $TAB clockRate.hpdUpper $TAB clockRate.ESS >> ../resultsPopSize$i
  
  # in line number '$LINE_NUMBER' replace everything after 'value=' with 'value="$i"/>'
  sed ''$LINE_NUMBER's/value=.*/ value="'$i'"'$TAG'/g' -i $FILE
  
  # create parallel loop of size BATCH
  for ((j = 1 ; j <= N ; j += BATCH)); do
    
    for ((k = j ; k < j + BATCH ; k++)); do
      
      if [[ k -le N ]]; then
        
        # BACKGROUND THREAD
        (
          
          # create sub-directory
          mkdir $k
          cp $FILE $k/$FILE
          cd $k
          
          # increment seed
          let NEWSEED=$SEED+$k
          
          # generate sequences
          ROOT_HEIGHT=$(java -Djava.library.path=$BEAGLE_PATH -jar $BEAST_PATH -beagle_CPU -beagle_double -beagle_scaling always -overwrite -seed $NEWSEED $FILE | grep height | cut -c17-35)
          
          echo "Simulated root height: $ROOT_HEIGHT"
          
          # in line number '$LINE_NUMBER' replace everything after 'dataType=' with 'dataType="nucleotide"/>'
          LINE_NUMBER=1
          TAG='\>'
          sed ''$LINE_NUMBER's/dataType=.*/ dataType="nucleotide"'$TAG'/g' -i sequences.xml          
          
          # compile XML
          cat ../../first_part.xml sequences.xml ../../last_part.xml > mcmc.xml
          
          # run analysis
          TIC="$(date +%s)"
          java -Djava.library.path=$BEAGLE_PATH -jar $BEAST_PATH -beagle_CPU -beagle_double -beagle_scaling always -seed $NEWSEED -overwrite mcmc.xml
          TOC="$(date +%s)"
          TIME=$(echo "scale=5; ($TOC-$TIC)/3600" | bc)
          
          echo "Finished in: $TIME h"
          
          # analyse results
          java -cp $BEAST_PATH dr.app.tools.LogAnalyser -burnin $BURNIN estimated.log >> summary
          
          # log the results
          echo -ne "$k $TAB $NEWSEED $TAB $TIME $TAB $i $TAB $ROOT_HEIGHT $TAB $(grep treeModel.rootHeight summary | cut -d $'\t' -f2-7) $TAB $CLOCK_RATE $TAB $(grep clock.rate summary | cut -d $'\t' -f2-7)" $NEW >> ../../resultsPopSize$i
          
          # go one directory up
          cd ../
          
          # clean up
          rm -r $k
          
        )&
        #END: BACKGROUND THREAD
        
      fi # END: k check
      
    done # END: k loop
    
    # wait for all spawned sub-processes to finish
    wait
    
  done #END: parallel j loop
  
  # come back to the root directory
  cd ../
  
  # clean up
  rm -r $DIR
  
done # END: i loop
